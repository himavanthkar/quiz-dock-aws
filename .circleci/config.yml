version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@3.2.0
  node: circleci/node@5.1.0

jobs:
  test:
    docker:
      - image: cimg/node:16.20
      - image: mongo:4.4
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run Tests
          command: npm test
          environment:
            MONGODB_URI_TEST: mongodb://localhost:27017/quiz-test
            JWT_SECRET: test-secret

  build-and-push-backend:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_KEY}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
      - run:
          name: Build and Push Backend
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker build -t ${AWS_ECR_BACKEND_REPO} .
            docker tag ${AWS_ECR_BACKEND_REPO}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_BACKEND_REPO}:latest
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_BACKEND_REPO}:latest

  build-and-push-frontend:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_KEY}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
      - run:
          name: Build and Push Frontend
          command: |
            cd frontend
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker build -t ${AWS_ECR_FRONTEND_REPO} .
            docker tag ${AWS_ECR_FRONTEND_REPO}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_FRONTEND_REPO}:latest
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_FRONTEND_REPO}:latest

  deploy-to-ecs:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_KEY}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
      - run:
          name: Deploy to ECS
          command: |
            # Print AWS CLI version and verify credentials
            aws --version
            aws sts get-caller-identity
            
            # Create ECS cluster if it doesn't exist
            echo "Creating/verifying ECS cluster..."
            aws ecs create-cluster \
              --cluster-name quiz-dock-cluster \
              --region ${AWS_DEFAULT_REGION} || true
            
            # Create task definition
            echo "Creating/updating task definition..."
            EXECUTION_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            
            aws ecs register-task-definition \
              --family quiz-dock-task \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --cpu 256 \
              --memory 512 \
              --execution-role-arn "$EXECUTION_ROLE_ARN" \
              --container-definitions '[
                {
                  "name": "quiz-dock-backend",
                  "image": "'${AWS_ACCOUNT_ID}'.dkr.ecr.'${AWS_DEFAULT_REGION}'.amazonaws.com/'${AWS_ECR_BACKEND_REPO}':latest",
                  "essential": true,
                  "portMappings": [{"containerPort": 5001, "protocol": "tcp"}]
                },
                {
                  "name": "quiz-dock-frontend",
                  "image": "'${AWS_ACCOUNT_ID}'.dkr.ecr.'${AWS_DEFAULT_REGION}'.amazonaws.com/'${AWS_ECR_FRONTEND_REPO}':latest",
                  "essential": true,
                  "portMappings": [{"containerPort": 3000, "protocol": "tcp"}]
                }
              ]'
            
            # Get the latest task definition ARN
            TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition quiz-dock-task --query 'taskDefinition.taskDefinitionArn' --output text)
            
            # Get default VPC subnets
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=default-for-az,Values=true" --query 'Subnets[].SubnetId' --output text | tr '\t' ',')
            
            # Get default VPC security group
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text)
            SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text)
            
            # Create or update ECS service
            echo "Creating/updating ECS service..."
            aws ecs create-service \
              --cluster quiz-dock-cluster \
              --service-name quiz-dock-service \
              --task-definition "$TASK_DEF_ARN" \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
              --region ${AWS_DEFAULT_REGION} || \
            aws ecs update-service \
              --cluster quiz-dock-cluster \
              --service quiz-dock-service \
              --task-definition "$TASK_DEF_ARN" \
              --force-new-deployment \
              --region ${AWS_DEFAULT_REGION}

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test
      - build-and-push-frontend:
          requires:
            - test
      - build-and-push-backend:
          requires:
            - test
      - deploy-to-ecs:
          requires:
            - build-and-push-frontend
            - build-and-push-backend 