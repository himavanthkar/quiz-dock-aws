version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@3.2.0
  node: circleci/node@5.1.0

jobs:
  test:
    docker:
      - image: cimg/node:18.19
        environment:
          NODE_ENV: test
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            npm install --legacy-peer-deps
            cd frontend && npm install --legacy-peer-deps
      - save_cache:
          paths:
            - node_modules
            - frontend/node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run Tests
          command: npm run test:ci
          no_output_timeout: 5m

  build-and-push-backend:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_KEY}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
      - run:
          name: Create ECR Repository if not exists
          command: |
            aws ecr describe-repositories --repository-names ${AWS_ECR_BACKEND_REPO} || aws ecr create-repository --repository-name ${AWS_ECR_BACKEND_REPO}
      - run:
          name: Build and Push Backend Image
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker build -t ${AWS_ECR_BACKEND_REPO}:latest -t ${AWS_ECR_BACKEND_REPO}:${CIRCLE_SHA1} --platform=linux/amd64 .
            docker tag ${AWS_ECR_BACKEND_REPO}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_BACKEND_REPO}:latest
            docker tag ${AWS_ECR_BACKEND_REPO}:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_BACKEND_REPO}:${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_BACKEND_REPO}:latest
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_BACKEND_REPO}:${CIRCLE_SHA1}

  build-and-push-frontend:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_KEY}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
      - run:
          name: Create ECR Repository if not exists
          command: |
            aws ecr describe-repositories --repository-names ${AWS_ECR_FRONTEND_REPO} || aws ecr create-repository --repository-name ${AWS_ECR_FRONTEND_REPO}
      - run:
          name: Build and Push Frontend Image
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            cd frontend
            docker build -t ${AWS_ECR_FRONTEND_REPO}:latest -t ${AWS_ECR_FRONTEND_REPO}:${CIRCLE_SHA1} --platform=linux/amd64 .
            docker tag ${AWS_ECR_FRONTEND_REPO}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_FRONTEND_REPO}:latest
            docker tag ${AWS_ECR_FRONTEND_REPO}:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_FRONTEND_REPO}:${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_FRONTEND_REPO}:latest
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_FRONTEND_REPO}:${CIRCLE_SHA1}

  deploy-to-ecs:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - run:
          name: Configure AWS Credentials
          command: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_KEY}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_DEFAULT_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
      - run:
          name: Deploy to ECS
          command: |
            # Print AWS CLI version and verify credentials
            aws --version
            aws sts get-caller-identity
            
            # List services to verify they exist
            echo "Available services in cluster ${AWS_ECS_CLUSTER}:"
            aws ecs list-services --cluster ${AWS_ECS_CLUSTER} --region ${AWS_DEFAULT_REGION}
            
            # Update service without task definition to force new deployment
            aws ecs update-service \
              --cluster ${AWS_ECS_CLUSTER} \
              --service quiz-dock-service \
              --force-new-deployment \
              --region ${AWS_DEFAULT_REGION}

workflows:
  build-test-deploy:
    jobs:
      - test
      - build-and-push-backend:
          requires:
            - test
      - build-and-push-frontend:
          requires:
            - test
      - deploy-to-ecs:
          requires:
            - build-and-push-backend
            - build-and-push-frontend 